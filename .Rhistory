rmse.V = sqrt(mean((yvals-center)^2))) %>%
ungroup() %>%
mutate(valid.newtons = force.valid$valid.newtons,
valid.volts = force.valid$valid.volts)
View(trial.summary)
raw.data <- read.csv("./Data Files/Raw Data.csv")
# View data
head(raw.data)
ncol(raw.data)
# Reshape to long format
raw.data.long <- raw.data %>%
select(id, block, trial, center, everything()) %>%
group_by(id, block, trial, center) %>%
gather(xvals, yvals, -id:-center)
#### Convert xvals ####
# Need to strip the prepended "x" from the values
raw.data.long$xvals <- as.numeric(gsub("[A-z]", "", raw.data.long$xvals))
head(raw.data.long)
#### Voltage to Newtons ####
# The force transducer reports the force in voltage. A calibration set was
# created to convert from the voltage to Newtons. This regression is not
# presented here but the coefficients are used.
raw.data.long <- raw.data.long %>%
mutate(center.N = 15.2713 + 26.199*center,
newtons = 15.2713 + 26.199*yvals)
#### Get screen scale values ####
# The target line (center) was at 40% MVC. The screen was scaled to 35-45% MVC.
# In order to determine how much of each trial was within view, the lower and
# upper screen bounds need to be computed.
raw.data.long <- mutate(raw.data.long,
screen.lower = -0.58 + 0.35*((center + 0.58)/0.4),
screen.upper = -0.58 + 0.45*((center + 0.58)/0.4),
screen.lower.N = 15.2713 + 26.199*screen.lower,
screen.upper.N = 15.2713 + 26.199*screen.upper)
#### Compute valid points ####
# Valid points are those which fall between screen.lower and screen.upper.
# For validation purposes, this will be computed for voltage and Newtons
raw.data.long <- mutate(
raw.data.long,
valid.point.volts = ifelse(yvals >= screen.lower &
yvals <= screen.upper,
1, 0),
valid.point.newtons = ifelse(newtons >= screen.lower.N &
newtons <= screen.upper.N, 1 , 0))
force.valid <- raw.data.long %>%
group_by(id, trial, center, center.N) %>%
summarise(count = n(),
valid.volts = sum(valid.point.volts)/count,
valid.newtons = sum(valid.point.newtons)/count)
#### Compute RMSE ####
# Create a summary data frame with id, trial, center.N, and RMSE. This
# frame will ultimately be merged with demographic frames, MMSE frames, DFA
# frames, etc.
trial.summary <- raw.data.long %>%
group_by(id, trial, center.N) %>%
summarise(rmse.N = sqrt(mean((newtons-center.N)^2)),
rmse.V = sqrt(mean((yvals-center)^2))) %>%
ungroup() %>%
mutate(valid.newtons = force.valid$valid.newtons,
valid.volts = force.valid$valid.volts)
View(trial.summary)
write.csv(trial.summary, "./Data Files/Trial Summary.csv")
trial.summary <- read.csv("./Data Files/Trial Summary.csv", header = TRUE, sep = ",")
fullFrame <- left_join(dfa.data, avp.data) %>%
left_join(trial.summary) %>%
left_join(participants)
raw.data <- read.csv("./Data Files/Raw Data.csv")
View(raw.data)
raw.data.long <- raw.data %>%
select(id, block, trial, center, everything()) %>%
group_by(id, block, trial, center) %>%
gather(xvals, yvals, -id:-center)
View(raw.data.long)
raw.data.long$xvals <- as.numeric(gsub("[A-z]", "", raw.data.long$xvals))
head(raw.data.long)
View(raw.data.long)
raw.data.long <- raw.data.long %>%
mutate(center.N = 15.2713 + 26.199*center,
newtons = 15.2713 + 26.199*yvals)
raw.data.long <- mutate(raw.data.long,
screen.lower = -0.58 + 0.35*((center + 0.58)/0.4),
screen.upper = -0.58 + 0.45*((center + 0.58)/0.4),
screen.lower.N = 15.2713 + 26.199*screen.lower,
screen.upper.N = 15.2713 + 26.199*screen.upper)
raw.data.long <- mutate(
raw.data.long,
valid.point.volts = ifelse(yvals >= screen.lower &
yvals <= screen.upper,
1, 0),
valid.point.newtons = ifelse(newtons >= screen.lower.N &
newtons <= screen.upper.N, 1 , 0))
force.valid <- raw.data.long %>%
group_by(id, trial, center, center.N) %>%
summarise(count = n(),
valid.volts = sum(valid.point.volts)/count,
valid.newtons = sum(valid.point.newtons)/count)
trial.summary <- raw.data.long %>%
group_by(id, trial, center.N) %>%
summarise(rmse.N = sqrt(mean((newtons-center.N)^2)),
rmse.V = sqrt(mean((yvals-center)^2))) %>%
ungroup() %>%
mutate(valid.newtons = force.valid$valid.newtons,
valid.volts = force.valid$valid.volts)
View(trial.summary)
?write.csv
write.csv(trial.summary, "./Data Files/Trial Summary.csv", row.names = FALSE)
fullFrame <- left_join(dfa.data, avp.data) %>%
left_join(trial.summary) %>%
left_join(participants)
dfa.data <- read.csv("./Data Files/DFA.csv", header = TRUE, sep = ",")
outcomes <- c("alpha", "x0.4.hz", "x4.8.hz", "x8.12.hz", "rmse.V")
i = 1
a <- my_boxplot(group = "block", y = outcomes[i], data = fullFrame)
a
a <- my_boxplot(group = "block", y = outcomes[i], data = fullFrame)
b <- my_boxplot(group = "prior.concussion", y = outcomes[i], data = fullFrame)
c <- my_boxplot(group = "gender", y = outcomes[i], data = fullFrame)
d <- my_boxplot(group = "gamer", y = outcomes[i], data = fullFrame)
library(cowplot)
plot_grid(a, b, c, d,
labels = c("A", "B", "C", "D"),
ncol = 2)
grid <- plot_grid(a, b, c, d,
labels = c("A", "B", "C", "D"),
ncol = 2)
ggdraw(grid)
my_scatterplot <- function(cols, data){
require(ggplot2)
require(GGally)
ggpairs(data = data,
columns = cols,
lower = list(
continuous = "smooth",
combo = "facetdensity"))
}
?plot_grid
View(fullFrame)
install.packages("GGally")
install.packages("GGally")
install.packages("GGally")
install.packages("scales")
require(extrafont)
loadfonts()
source("./R Script files/Helper functions.R")
i = 1
a <- my_boxplot(group = "block", y = outcomes[i], data = fullFrame)
a
a <- my_boxplot(group = "block", y = outcomes[i], data = fullFrame)
b <- my_boxplot(group = "prior.concussion", y = outcomes[i], data = fullFrame)
c <- my_boxplot(group = "gender", y = outcomes[i], data = fullFrame)
d <- my_boxplot(group = "gamer", y = outcomes[i], data = fullFrame)
grid <- plot_grid(a, b, c, d,
labels = c("A", "B", "C", "D"),
ncol = 2)
library(cowplot)
a <- my_boxplot(group = "block", y = outcomes[i], data = fullFrame)
b <- my_boxplot(group = "prior.concussion", y = outcomes[i], data = fullFrame)
c <- my_boxplot(group = "gender", y = outcomes[i], data = fullFrame)
d <- my_boxplot(group = "gamer", y = outcomes[i], data = fullFrame)
grid <- plot_grid(a, b, c, d,
labels = c("A", "B", "C", "D"),
ncol = 2)
print(grid)
View(dfa.data)
View(avp.data)
avp.data.long <- gather(outcome, avp, -id, -block, -trial)
require(tidyverse)
avp.data.long <- gather(outcome, avp, -id, -block, -trial)
avp.data.long <- gather(avp.data, outcome, avp, -id, -block, -trial)
View(avp.data.long)
individual.frame <- left_join(dfa.data, avp.data.long)
View(individual.frame)
View(dfa.data)
dfa.data <- mutate(dfa.data, outcome = "DFA")
avp.data.long <- gather(avp.data, outcome, avp, -id, -block, -trial)
individual.frame <- left_join(dfa.data, avp.data.long)
View(individual.frame)
individual.frame <- bind_rows(dfa.data, avp.data.long)
is_outlier <- function(x) {
return(x < quantile(x, 0.25) - 1.5 * IQR(x) | x > quantile(x, 0.75) + 1.5 * IQR(x))
}
View(individual.frame)
dfa.data <- mutate(dfa.data, outcome = "DFA") %>%
rename(value = "alpha")
?rename
dfa.data <- mutate(dfa.data, outcome = "DFA") %>%
rename(value = alpha)
dfa.data <- read.csv(paste(my_dir, "/Data Files/DFA.csv", sep = ""),
header = TRUE, sep = ",")
my_dir <- getwd()
dfa.data <- read.csv(paste(my_dir, "/Data Files/DFA.csv", sep = ""),
header = TRUE, sep = ",")
dfa.data.long <- mutate(dfa.data, outcome = "DFA") %>%
rename(value = alpha)
avp.data.long <- gather(avp.data, outcome, value, -id, -block, -trial)
individual.frame <- left_join(dfa.data, avp.data.long
)
View(individual.frame)
View(dfa.data.long)
individual.frame <- left_join(dfa.data.long, avp.data.long)
```
View(individual.frame)
individual.frame <- bind_rows(dfa.data.long, avp.data.long)
View(individual.frame)
individual.frame <- group_by(individual_frame, id, outcome) %>%
mutate(outlier = ifelse(is_outlier(value), trial, as.numeric(NA)))
individual.frame <- group_by(individual.frame, id, outcome) %>%
mutate(outlier = ifelse(is_outlier(value), trial, as.numeric(NA)))
View(individual.frame)
id.vec <- ungroup(individual.frame) %>%
distinct(id) %>%
select(id) %>%
collect %>% .[["id"]]
boxplot_outliers <- function(group, y, outlier, data){
require(ggplot2)
ggplot(data = data, aes_string(group, y)) +
geom_boxplot(notch = TRUE) +
geom_text(aes_string(label = outlier), na.rm = TRUE, hjust = -0.3) +
xlab(group) +
ylab(y) +
theme_bw()
}
i = 1
tmp <- filter(individual.frame, id == id.vec[i])
boxplot_outliers <- function(y, outlier, title, data){
require(ggplot2)
ggplot(data = data, aes_string(y)) +
geom_boxplot(notch = TRUE) +
geom_text(aes_string(label = outlier), na.rm = TRUE, hjust = -0.3) +
ggtitle(title) +
theme_bw()
}
boxplot_outliers <- function(y, outlier, outcome, data){
require(ggplot2)
ggplot(data = data, aes_string(y)) +
facet_wrap(as.formula("~", outcome)) +
geom_boxplot(notch = TRUE) +
geom_text(aes_string(label = outlier), na.rm = TRUE, hjust = -0.3) +
ggtitle(title) +
theme_bw()
}
boxplot_outliers <- function(y, outlier, outcome, data){
require(ggplot2)
ggplot(data = data, aes_string(y)) +
facet_wrap(as.formula("~", outcome)) +
geom_boxplot(notch = TRUE) +
geom_text(aes_string(label = outlier), na.rm = TRUE, hjust = -0.3) +
theme_bw()
}
indiv.boxplot <- boxplot_outliers(y = "value", outlier = "outlier",
outcome = "outcome", data = tmp)
boxplot_outliers <- function(y, outlier, outcome, data){
require(ggplot2)
ggplot(data = data, aes_string(y)) +
facet_wrap(as.formula(outcome)) +
geom_boxplot(notch = TRUE) +
geom_text(aes_string(label = outlier), na.rm = TRUE, hjust = -0.3) +
theme_bw()
}
indiv.boxplot <- boxplot_outliers(y = "value", outlier = "outlier",
outcome = "outcome", data = tmp)
View(individual.frame)
boxplot_outliers <- function(y, outlier, outcome, data){
require(ggplot2)
ggplot(data = data, aes_string(y)) +
facet_wrap(reformulate(.,outcome)) +
geom_boxplot(notch = TRUE) +
geom_text(aes_string(label = outlier), na.rm = TRUE, hjust = -0.3) +
theme_bw()
}
indiv.boxplot <- boxplot_outliers(y = "value", outlier = "outlier",
outcome = "outcome", data = tmp)
?reformulate
reformulate("outcome")
boxplot_outliers <- function(y, outlier, outcome, data){
require(ggplot2)
ggplot(data = data, aes_string(y)) +
facet_wrap(reformulate(outcome)) +
geom_boxplot(notch = TRUE) +
geom_text(aes_string(label = outlier), na.rm = TRUE, hjust = -0.3) +
theme_bw()
}
indiv.boxplot <- boxplot_outliers(y = "value", outlier = "outlier",
outcome = "outcome", data = tmp)
indiv.boxplot
boxplot_outliers <- function(y, outlier, outcome, data){
require(ggplot2)
ggplot(data = data, aes_string(outcome, y)) +
#facet_wrap(reformulate(outcome)) +
geom_boxplot(notch = TRUE) +
geom_text(aes_string(label = outlier), na.rm = TRUE, hjust = -0.3) +
theme_bw()
}
indiv.boxplot <- boxplot_outliers(y = "value", outlier = "outlier",
outcome = "outcome", data = tmp)
indiv.boxplot
boxplot_outliers <- function(y, outlier, outcome, data){
require(ggplot2)
ggplot(data = data, aes_string(x = 1, y)) +
facet_wrap(reformulate(outcome)) +
geom_boxplot(notch = TRUE) +
geom_text(aes_string(label = outlier), na.rm = TRUE, hjust = -0.3) +
theme_bw()
}
indiv.boxplot <- boxplot_outliers(y = "value", outlier = "outlier",
outcome = "outcome", data = tmp)
indiv.boxplot
boxplot_outliers <- function(y, outlier, outcome, data){
require(ggplot2)
ggplot(data = data, aes_string(x = 1, y)) +
facet_wrap(reformulate(outcome), scales = "free") +
geom_boxplot(notch = TRUE) +
geom_text(aes_string(label = outlier), na.rm = TRUE, hjust = -0.3) +
theme_bw()
}
indiv.boxplot <- boxplot_outliers(y = "value", outlier = "outlier",
outcome = "outcome", data = tmp)
indiv.boxplot
grid <- boxplot_outliers(y = "value", outlier = "outlier",
outcome = "outcome", data = tmp)
title <- ggdraw() + draw_label(paste("Participant ", id.vec[i], sep = ""),
fontface = "bold")
indiv.plot <- plot_grid(title, grid, ncol = 1, rel_heights = c(0.1,1))
indiv.plot
for (i in length(id.vec)){
print(i)
}
knitr::knit("./R Script files/Exporatory analysis.Rmd",
"./Plots/Exploratory analysis.pdf")
knitr::knit("./R Script files/Exploratory analysis.Rmd",
"./Plots/Exploratory analysis.pdf")
?knit2pdf
knitr::knit("./R Script files/Exploratory analysis.Rmd")
rmarkdown:render("./R Script files/Exploratory analysis.Rmd",
"pdf_document")
rmarkdown::render("./R Script files/Exploratory analysis.Rmd",
"pdf_document")
rmarkdown::render("./R Script files/Exploratory analysis.Rmd",
"pdf_document")
warnings()
indiv.plot
rmarkdown::render(input = "./R Script files/Exploratory analysis.Rmd",
output_format = "pdf_document",
output_file = "./Plots/Exploratory Analysis.pdf")
rmarkdown::render(input = "./R Script files/Exploratory analysis.Rmd",
output_format = "pdf_document",
output_file = "./Plots/Exploratory Analysis.pdf")
?table1
??table1
View(trial.summary)
source("./R Script files/Helper functions.R")
source("./R Script files/Deidentification.R")
warnings()
source("./R Script files/Deidentification.R")
source("./R Script files/Trial Validation.R")
View(trial.summary)
source("./R Script files/Deidentification.R")
source("./R Script files/Deidentification.R")
write.csv(trial.summary, "./Data Files/Trial Summary.csv", row.names = FALSE)
mmse.data <- read.csv("./Data Files/MMSE.csv", header = TRUE, sep = ",")
raw.complexity <- group_by(mmse.data, subject) %>%
gather(scale, value, -trial) %>%
summarise(complexity = sum(value)
)
View(mmse.data)
raw.complexity <- group_by(mmse.data, id) %>%
gather(scale, value, -trial, -block) %>%
summarise(complexity = sum(value))
View(raw.complexity)
raw.complexity <- group_by(mmse.data, id) %>%
gather(scale, value, -trial, -block) %>%
group_by(id) %>%
summarise(complexity = sum(value))
raw.complexity <- group_by(mmse.data, id) %>%
gather(scale, value, -id, -trial, -block) %>%
summarise(complexity = sum(value))
View(raw.complexity)
View(mmse.data)
dfa.data <- read.csv(paste(my_dir, "/Data Files/DFA.csv", sep = ""),
header = TRUE, sep = ",")
avp.data <- read.csv(paste(my_dir, "./Data Files/AvP.csv", sep = ""),
header = TRUE, sep = ",")
trial.summary <- read.csv(paste(my_dir, "./Data Files/Trial Summary.csv", sep = ""),
header = TRUE, sep = ",")
my_dir <- getwd()
mmse.data <- read.csv(paste(my_dir, "./Data Files/MMSE.csv", sep = ""),
header = TRUE, sep = ",")
mmse.detrended.data <- read.csv(paste(my_dir, "./Data Files/Detrended MMSE.csv", sep = ""),
header = TRUE, sep = ",")
dfa.data <- read.csv(paste(my_dir, "/Data Files/DFA.csv", sep = ""),
header = TRUE, sep = ",")
avp.data <- read.csv(paste(my_dir, "./Data Files/AvP.csv", sep = ""),
header = TRUE, sep = ",")
trial.summary <- read.csv(paste(my_dir, "./Data Files/Trial Summary.csv", sep = ""),
header = TRUE, sep = ",")
# Create dataframe with only complexity for MMSE and detrended MMSE
raw.complexity <- group_by(mmse.data, id) %>%
gather(scale, value, -id, -trial, -block) %>%
summarise(complexity = sum(value))
detrended.complexity <- group_by(mmse.detrended.data, id) %>%
gather(scale, value, -id, -trial, -block) %>%
summarise(detrended.complexity = sum(value))
```
```{r createJointFrame}
full.frame <- left_join(dfa.data, avp.data) %>%
left_join(trial.summary) %>%
left_join(raw.complexity) %>%
left_join(detrended.complexity) %>%
left_join(participants)
source("./R Script files/Participant information.R")
full.frame <- left_join(dfa.data, avp.data) %>%
left_join(trial.summary) %>%
left_join(raw.complexity) %>%
left_join(detrended.complexity) %>%
left_join(participants)
View(full.frame)
View(detrended.complexity)
rmarkdown::render(input = "./R Script files/Exploratory analysis.Rmd",
output_format = "pdf_document",
output_file = "./Plots/Exploratory Analysis.pdf")
#### Load helper functions ####
source("./R Script files/Helper functions.R")
#### Get minimal participant information ####
source("./R Script files/Participant information.R")
```
```{r descriptiveStatistics}
part.desc <- select(participants, height, weight, age, gender, hand, gamer,
diagnosed.number, suspected.number, concussion.number,
prior.concussion)
table1(part.desc,
height, weight, age, gender, hand, gamer,
diagnosed.number, suspected.number, concussion.number,
splitby = ~prior.concussion,
test = TRUE,
output_type = "markdown")
```
\newpage
\center
#Boxplots of outcomes by factor-level predictors
\newpage
\blandscape
```{r readData}
#### Read in outcomes data ####
mmse.data <- read.csv(paste(my_dir, "./Data Files/MMSE.csv", sep = ""),
header = TRUE, sep = ",")
mmse.detrended.data <- read.csv(paste(my_dir, "./Data Files/Detrended MMSE.csv", sep = ""),
header = TRUE, sep = ",")
dfa.data <- read.csv(paste(my_dir, "/Data Files/DFA.csv", sep = ""),
header = TRUE, sep = ",")
avp.data <- read.csv(paste(my_dir, "./Data Files/AvP.csv", sep = ""),
header = TRUE, sep = ",")
trial.summary <- read.csv(paste(my_dir, "./Data Files/Trial Summary.csv", sep = ""),
header = TRUE, sep = ",")
# Create dataframe with only complexity for MMSE and detrended MMSE
raw.complexity <- group_by(mmse.data, id) %>%
gather(scale, value, -id, -trial, -block) %>%
summarise(complexity = sum(value))
detrended.complexity <- group_by(mmse.detrended.data, id) %>%
gather(scale, value, -id, -trial, -block) %>%
summarise(detrended.complexity = sum(value))
```
```{r createJointFrame}
full.frame <- left_join(dfa.data, avp.data) %>%
left_join(trial.summary) %>%
left_join(raw.complexity) %>%
left_join(detrended.complexity) %>%
left_join(participants)
```
```{r boxplots, results = "asis", fig.height = 10, fig.width = 16}
outcomes <- c("rmse.V", "raw.complexity",
"detrended.complexity", "avp04", "avp48",
"avp812", "alpha")
titles <- c("RMSE", "Complexity", "Detrended Complexity",
"Average 0-4 Hz Power",
"Average 4-8 Hz Power", "Average 8-12 Hz Power",
"DFA Alpha")
for (i in 1:length(outcomes)){
a <- my_boxplot(group = "block", y = outcomes[i], data = full.frame)
b <- my_boxplot(group = "prior.concussion", y = outcomes[i], data = full.frame)
c <- my_boxplot(group = "gender", y = outcomes[i], data = full.frame)
d <- my_boxplot(group = "gamer", y = outcomes[i], data = full.frame)
grid <- plot_grid(a, b, c, d,
labels = c("A", "B", "C", "D"),
ncol = 2)
title <- ggdraw() + draw_label(titles[i], fontface = "bold")
panel_plot <- plot_grid(title, grid, ncol = 1, rel_heights = c(0.1,1))
print(panel_plot)
cat("\\newpage")
}
View(full.frame)
rmarkdown::render(input = "./R Script files/Exploratory analysis.Rmd",
output_format = "pdf_document",
output_file = "./Plots/Exploratory Analysis.pdf")
View(individual.frame)
View(raw.complexity)
raw.complexity <- group_by(mmse.data, id) %>%
gather(scale, value, -id, -trial, -block) %>%
summarise(complexity = sum(value))
View(raw.complexity)
raw.complexity <- group_by(mmse.data, id) %>%
gather(scale, value, -id, -trial, -block) %>%
group_by(id, block, trial) %>%
summarise(complexity = sum(value))
View(raw.complexity)
detrended.complexity <- group_by(mmse.detrended.data, id) %>%
gather(scale, value, -id, -trial, -block) %>%
group_by(id, block, trial) %>%
summarise(detrended.complexity = sum(value))
raw.complexity <- mutate(raw.complexity, outcome = "MMSE") %>%
rename(value = complexity)
View(raw.complexity)
View(full.frame)
