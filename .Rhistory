alpha_mean + gender:detrended.complexity_mean +
gender:alpha_mean,
family = binomial,
data = .)))
### Gender mean model predictions ----
gender.mean.probs <- gender.mean.models %>%
mutate(gender.pred = map2(gender.model, test, type = "response", predict),
rmse.pred = map2(rmse.model, test, type = "response", predict),
dtcomplex.pred = map2(dtcomplex.model, test, type = "response", predict),
sampen.pred = map2(sampen.model, test, type = "response", predict),
avp04.pred = map2(avp04.model, test, type = "response", predict),
avp48.pred = map2(avp48.model, test, type = "response", predict),
avp812.pred = map2(avp812.model, test, type = "response", predict),
alpha.pred = map2(dfa.model, test, type = "response", predict),
combo.pred = map2(combo.model, test, type = 'response', predict),
id = map(map(test, as.data.frame), "id", select),
actual = map(map(test, as.data.frame), "prior.concussion", select)) %>%
select(id, actual, gender.pred:combo.pred) %>%
unnest()
gender.mean.thresholds <- gender.mean.probs %>%
summarise_at(vars(ends_with("pred")),
function (x) coords(roc(actual, x, direction = "<"), "best", ret = "threshold")[1])
gender.mean.predictions <- gender.mean.probs %>%
mutate(gender.pred = ifelse(gender.pred > gender.mean.thresholds$gender.pred, 1, 0),
rmse.pred = ifelse(rmse.pred > gender.mean.thresholds$rmse.pred, 1,0),
dtcomplex.pred = ifelse(dtcomplex.pred > gender.mean.thresholds$dtcomplex.pred, 1,0),
sampen.pred = ifelse(sampen.pred > gender.mean.thresholds$sampen.pred, 1,0),
avp04.pred = ifelse(avp04.pred > gender.mean.thresholds$avp04.pred, 1,0),
avp48.pred = ifelse(avp48.pred > gender.mean.thresholds$avp48.pred, 1,0),
avp812.pred = ifelse(avp812.pred > gender.mean.thresholds$avp812.pred, 1,0),
alpha.pred = ifelse(alpha.pred > gender.mean.thresholds$alpha.pred, 1,0),
combo.pred = ifelse(combo.pred > gender.mean.thresholds$combo.pred, 1, 0))
### Gender mean model performance ----
gender.mean.perf <- gender.mean.predictions %>%
select(-id, -actual) %>%
summarise_at(vars(ends_with("pred")), funs(sens, specif, ppv, npv, acc, auc, auc.p)) %>%
gather(outcome, value) %>%
separate(outcome, c("Outcome", "Measure"), "_") %>%
spread(Measure, value) %>%
arrange(auc) %>%
select(Outcome, auc, auc.p, sens, specif, everything())
View(gender.mean.perf)
simple.ensemble <- gender.mean.predictions %>%
select(-gender.pred) %>%
group_by(id, actual) %>%
gather(Outcome, Prediction, -id, -actual) %>%
summarise(newpred = mean(Prediction)) %>%
mutate(newpred = ifelse(newpred > 0.5, 1, 0))
caret::confusionMatrix(simple.ensemble$newpred,
simple.ensemble$actual,
positive = "1")
weighted.ensemble <- gender.mean.probs %>%
select(-gender.pred) %>%
group_by(id, actual) %>%
gather(Outcome, Prediction, -id, -actual) %>%
summarise(newpred = mean(Prediction))
weighted.thresh <- coords(roc(weighted.ensemble$actual,
weighted.ensemble$newpred,
direction = "<"),
"best",
best.method = "youden",
ret = "threshold")
weighted.ensemble <- mutate(weighted.ensemble,
newpred = ifelse(newpred > weighted.thresh, 1, 0))
caret::confusionMatrix(weighted.ensemble$newpred,
weighted.ensemble$actual,
positive = "1")
verification::roc.area(weighted.ensemble$actual, weighted.ensemble$newpred)
### For comparison with 80% sensitivity ----
## Get thresholds ----
sens.075.thresh <- gender.mean.probs %>%
summarise_at(vars(ends_with("pred")),
function (x) tail(as.vector(coords(roc(actual, x,
direction = "<",
partial.auc = c(1, 0.75),
partial.auc.focus = "sensitivity"),
x = "local maximas",
ret = "threshold")),  n = 1))
sens.08.thresh <- gender.mean.probs %>%
summarise_at(vars(ends_with("pred")),
function (x) tail(as.vector(coords(roc(actual, x,
direction = "<",
partial.auc = c(1, 0.8),
partial.auc.focus = "sensitivity"),
x = "local maximas",
ret = "threshold")),  n = 1))
sens.085.thresh <- gender.mean.probs %>%
summarise_at(vars(ends_with("pred")),
function (x) tail(as.vector(coords(roc(actual, x,
direction = "<",
partial.auc = c(1, 0.85),
partial.auc.focus = "sensitivity"),
x = "local maximas",
ret = "threshold")),  n = 1))
# Sens = 0.75 ----
sens.075.predictions <- gender.mean.probs %>%
mutate(rmse.pred = ifelse(rmse.pred > sens.075.thresh$rmse.pred, 1,0),
dtcomplex.pred = ifelse(dtcomplex.pred > sens.075.thresh$dtcomplex.pred, 1,0),
sampen.pred = ifelse(sampen.pred > sens.075.thresh$sampen.pred, 1,0),
avp04.pred = ifelse(avp04.pred > sens.075.thresh$avp04.pred, 1,0),
avp48.pred = ifelse(avp48.pred > sens.075.thresh$avp48.pred, 1,0),
avp812.pred = ifelse(avp812.pred > sens.075.thresh$avp812.pred, 1,0),
alpha.pred = ifelse(alpha.pred > sens.075.thresh$alpha.pred, 1,0),
gender.pred = ifelse(gender.pred > sens.075.thresh$gender.pred, 1,0),
combo.pred = ifelse(combo.pred > sens.075.thresh$combo.pred, 1,0),
complete.pred = ifelse(complete.pred > sens.075.thresh$complete.pred, 1, 0))
# Singular mean model performance
sens.075.perf <- sens.075.predictions %>%
select(-id, -actual) %>%
summarise_at(vars(ends_with("pred")), funs(specif, ppv, npv, acc)) %>%
gather(outcome, value) %>%
separate(outcome, c("Outcome", "Measure"), "_") %>%
spread(Measure, value)
# Sens = 0.8 ----
sens.08.predictions <- gender.mean.probs %>%
mutate(rmse.pred = ifelse(rmse.pred > sens.08.thresh$rmse.pred, 1,0),
dtcomplex.pred = ifelse(dtcomplex.pred > sens.08.thresh$dtcomplex.pred, 1,0),
sampen.pred = ifelse(sampen.pred > sens.08.thresh$sampen.pred, 1,0),
avp04.pred = ifelse(avp04.pred > sens.08.thresh$avp04.pred, 1,0),
avp48.pred = ifelse(avp48.pred > sens.08.thresh$avp48.pred, 1,0),
avp812.pred = ifelse(avp812.pred > sens.08.thresh$avp812.pred, 1,0),
alpha.pred = ifelse(alpha.pred > sens.08.thresh$alpha.pred, 1,0),
gender.pred = ifelse(gender.pred > sens.08.thresh$gender.pred, 1,0),
combo.pred = ifelse(combo.pred > sens.08.thresh$combo.pred, 1,0),
complete.pred = ifelse(complete.pred > sens.08.thresh$complete.pred, 1, 0))
# Singular mean model performance
sens.08.perf <- sens.08.predictions %>%
select(-id, -actual) %>%
summarise_at(vars(ends_with("pred")), funs(specif, ppv, npv, acc)) %>%
gather(outcome, value) %>%
separate(outcome, c("Outcome", "Measure"), "_") %>%
spread(Measure, value)
# Sens = 0.85 ----
sens.085.predictions <- gender.mean.probs %>%
mutate(rmse.pred = ifelse(rmse.pred > sens.085.thresh$rmse.pred, 1,0),
dtcomplex.pred = ifelse(dtcomplex.pred > sens.085.thresh$dtcomplex.pred, 1,0),
sampen.pred = ifelse(sampen.pred > sens.085.thresh$sampen.pred, 1,0),
avp04.pred = ifelse(avp04.pred > sens.085.thresh$avp04.pred, 1,0),
avp48.pred = ifelse(avp48.pred > sens.085.thresh$avp48.pred, 1,0),
avp812.pred = ifelse(avp812.pred > sens.085.thresh$avp812.pred, 1,0),
alpha.pred = ifelse(alpha.pred > sens.085.thresh$alpha.pred, 1,0),
gender.pred = ifelse(gender.pred > sens.085.thresh$gender.pred, 1,0),
combo.pred = ifelse(combo.pred > sens.085.thresh$combo.pred, 1,0),
complete.pred = ifelse(complete.pred > sens.085.thresh$complete.pred, 1, 0))
# Singular mean model performance
sens.085.perf <- sens.085.predictions %>%
select(-id, -actual) %>%
summarise_at(vars(ends_with("pred")), funs(specif, ppv, npv, acc)) %>%
gather(outcome, value) %>%
separate(outcome, c("Outcome", "Measure"), "_") %>%
spread(Measure, value)
## Get thresholds ----
sens.075.thresh <- gender.mean.probs %>%
summarise_at(vars(ends_with("pred")),
function (x) tail(as.vector(coords(roc(actual, x,
direction = "<",
partial.auc = c(1, 0.75),
partial.auc.focus = "sensitivity"),
x = "local maximas",
ret = "threshold")),  n = 1))
sens.08.thresh <- gender.mean.probs %>%
summarise_at(vars(ends_with("pred")),
function (x) tail(as.vector(coords(roc(actual, x,
direction = "<",
partial.auc = c(1, 0.8),
partial.auc.focus = "sensitivity"),
x = "local maximas",
ret = "threshold")),  n = 1))
sens.085.thresh <- gender.mean.probs %>%
summarise_at(vars(ends_with("pred")),
function (x) tail(as.vector(coords(roc(actual, x,
direction = "<",
partial.auc = c(1, 0.85),
partial.auc.focus = "sensitivity"),
x = "local maximas",
ret = "threshold")),  n = 1))
# Sens = 0.75 ----
sens.075.predictions <- gender.mean.probs %>%
mutate(rmse.pred = ifelse(rmse.pred > sens.075.thresh$rmse.pred, 1,0),
dtcomplex.pred = ifelse(dtcomplex.pred > sens.075.thresh$dtcomplex.pred, 1,0),
sampen.pred = ifelse(sampen.pred > sens.075.thresh$sampen.pred, 1,0),
avp04.pred = ifelse(avp04.pred > sens.075.thresh$avp04.pred, 1,0),
avp48.pred = ifelse(avp48.pred > sens.075.thresh$avp48.pred, 1,0),
avp812.pred = ifelse(avp812.pred > sens.075.thresh$avp812.pred, 1,0),
alpha.pred = ifelse(alpha.pred > sens.075.thresh$alpha.pred, 1,0),
gender.pred = ifelse(gender.pred > sens.075.thresh$gender.pred, 1,0),
combo.pred = ifelse(combo.pred > sens.075.thresh$combo.pred, 1,0))
# Singular mean model performance
sens.075.perf <- sens.075.predictions %>%
select(-id, -actual) %>%
summarise_at(vars(ends_with("pred")), funs(specif, ppv, npv, acc)) %>%
gather(outcome, value) %>%
separate(outcome, c("Outcome", "Measure"), "_") %>%
spread(Measure, value)
# Sens = 0.8 ----
sens.08.predictions <- gender.mean.probs %>%
mutate(rmse.pred = ifelse(rmse.pred > sens.08.thresh$rmse.pred, 1,0),
dtcomplex.pred = ifelse(dtcomplex.pred > sens.08.thresh$dtcomplex.pred, 1,0),
sampen.pred = ifelse(sampen.pred > sens.08.thresh$sampen.pred, 1,0),
avp04.pred = ifelse(avp04.pred > sens.08.thresh$avp04.pred, 1,0),
avp48.pred = ifelse(avp48.pred > sens.08.thresh$avp48.pred, 1,0),
avp812.pred = ifelse(avp812.pred > sens.08.thresh$avp812.pred, 1,0),
alpha.pred = ifelse(alpha.pred > sens.08.thresh$alpha.pred, 1,0),
gender.pred = ifelse(gender.pred > sens.08.thresh$gender.pred, 1,0),
combo.pred = ifelse(combo.pred > sens.08.thresh$combo.pred, 1,0))
# Singular mean model performance
sens.08.perf <- sens.08.predictions %>%
select(-id, -actual) %>%
summarise_at(vars(ends_with("pred")), funs(specif, ppv, npv, acc)) %>%
gather(outcome, value) %>%
separate(outcome, c("Outcome", "Measure"), "_") %>%
spread(Measure, value)
# Sens = 0.85 ----
sens.085.predictions <- gender.mean.probs %>%
mutate(rmse.pred = ifelse(rmse.pred > sens.085.thresh$rmse.pred, 1,0),
dtcomplex.pred = ifelse(dtcomplex.pred > sens.085.thresh$dtcomplex.pred, 1,0),
sampen.pred = ifelse(sampen.pred > sens.085.thresh$sampen.pred, 1,0),
avp04.pred = ifelse(avp04.pred > sens.085.thresh$avp04.pred, 1,0),
avp48.pred = ifelse(avp48.pred > sens.085.thresh$avp48.pred, 1,0),
avp812.pred = ifelse(avp812.pred > sens.085.thresh$avp812.pred, 1,0),
alpha.pred = ifelse(alpha.pred > sens.085.thresh$alpha.pred, 1,0),
gender.pred = ifelse(gender.pred > sens.085.thresh$gender.pred, 1,0),
combo.pred = ifelse(combo.pred > sens.085.thresh$combo.pred, 1,0))
# Singular mean model performance
sens.085.perf <- sens.085.predictions %>%
select(-id, -actual) %>%
summarise_at(vars(ends_with("pred")), funs(specif, ppv, npv, acc)) %>%
gather(outcome, value) %>%
separate(outcome, c("Outcome", "Measure"), "_") %>%
spread(Measure, value)
View(sens.085.perf)
View(sens.08.perf)
rm(ls = c("avp.data", "complexity", "detrended.mmse.long", "dfa.data",
"trial.outcomes", "trial.summary", "valid.participants", "valid.trials"))
rm(list = c("avp.data", "complexity", "detrended.mmse.long", "dfa.data",
"trial.outcomes", "trial.summary", "valid.participants", "valid.trials"))
View(mean.perf)
?roc.area
View(gender.mean.perf)
View(sens.075.perf)
View(sens.085.perf)
train_control <- trainControl(method = "cv",
number = 10)
trainData <- mutate(average.outcomes, prior.concussion = ifelse(prior.concussion == 1, "Yes", "No"))
?train
train_control <- traincontrol(method = "cv",
k = 10)
train_control <- trainControl(method = "cv",
k = 10)
?trainControl
train_control <- trainControl(method = "cv",
number = 10)
glm.model <- train(prior.concussion ~ gender * detrended.complexity_mean,
trControl = train_control,
data = trainData,
method = "glm",
family = binomial)
warnings()
summary(glm.model)
trainData$prior.concussion <- factor(trainData$prior.concussion)
glm.model <- train(prior.concussion ~ gender * detrended.complexity_mean,
trControl = train_control,
data = trainData,
method = "glm",
family = binomial)
### Gender mean models ----
gender.mean.models <- concussion.crossval %>%
mutate(train = map(train, as_tibble)) %>%
mutate(gender.model = map(train, ~ glm(prior.concussion ~ gender,
family = binomial,
data = .)),
rmse.model = map(train, ~ glm(prior.concussion ~ gender * rmse.V_mean,
family = binomial,
data = .)),
dtcomplex.model = map(train, ~ glm(prior.concussion ~ gender * detrended.complexity_mean,
family = binomial,
data = .)),
sampen.model = map(train, ~glm(prior.concussion ~ gender * sample.entropy_mean,
family = binomial,
data = .)),
avp04.model = map(train, ~ glm(prior.concussion ~ gender * avp04_mean,
family = binomial,
data = .)),
avp48.model = map(train, ~ glm(prior.concussion ~ gender * avp48_mean,
family = binomial,
data = .)),
avp812.model = map(train, ~ glm(prior.concussion ~ gender * avp812_mean,
family = binomial,
data = .)),
dfa.model = map(train, ~ glm(prior.concussion ~ gender * alpha_mean,
family = binomial,
data = .)),
combo.model = map(train, ~ glm(prior.concussion ~ gender + detrended.complexity_mean +
alpha_mean + gender:detrended.complexity_mean +
gender:alpha_mean,
family = binomial,
data = .)))
rmse(gender.mean.models$dtcomplex.model)
?rmse
rmse(gender.mean.models$dtcomplex.model, gender.mean.models$train)
gender.mean.models %>% group_by(.id) %>% mutate(err = rmse(dtcomplex.model, train))
gender.mean.models %>% mutate(err = map2_dbl(model, test, rmse))
gender.mean.models %>% mutate(err = map2_dbl(dtcomplex.model, test, rmse))
gender.mean.models %>% mutate(err = map2_dbl(dtcomplex.model, test, rmse)) %>% select(.id, err)
gender.mean.models %>% mutate(err = map2_dbl(dtcomplex.model, test, rsq)) %>% select(.id, err)
gender.mean.models %>% mutate(err = map2_dbl(dtcomplex.model, test, rsquare)) %>% select(.id, err)
gender.mean.models %>% mutate(err = map2_dbl(dtcomplex.model, test, qae)) %>% select(.id, err)
gender.mean.models %>% mutate(err = map2_dbl(dtcomplex.model, test, mae)) %>% select(.id, err)
gender.mean.models %>% mutate(err = map2_dbl(dtcomplex.model, train, mae)) %>% select(.id, err)
gender.mean.models %>% mutate(err = map2_dbl(dtcomplex.model, train, rmse)) %>% select(.id, err)
(.62^3)+ (.62^2 *.38)
(.62^3)+ (.62^2 *.38) + (0.38*0.38*0.62)
mean(gender.mean.perf$specif)
mean(gender.mean.perf$sens)
dx.data <- filter(average.outcomes, dx.status != "Susp Only")
dx.crossval <- select(dx.data, id, gender, prior.concussion, rmse.V_mean:alpha_cv) %>%
mutate(prior.concussion = ifelse(prior.concussion == "Yes", 1, 0)) %>%
crossv_kfold(10)
View(dx.crossval)
dx.actual <-  mutate(dx.crossval,
id = map(map(test, as.data.frame), "id", select),
actual = map(map(test, as.data.frame), "prior.concussion", select)) %>%
select(actual) %>%
unnest() %>%
collect %>% .[["actual"]]
dx.mean.models <- concussion.crossval %>%
mutate(train = map(train, as_tibble)) %>%
mutate(gender.model = map(train, ~ glm(prior.concussion ~ gender,
family = binomial,
data = .)),
rmse.model = map(train, ~ glm(prior.concussion ~ gender * rmse.V_mean,
family = binomial,
data = .)),
dtcomplex.model = map(train, ~ glm(prior.concussion ~ gender * detrended.complexity_mean,
family = binomial,
data = .)),
sampen.model = map(train, ~glm(prior.concussion ~ gender * sample.entropy_mean,
family = binomial,
data = .)),
avp04.model = map(train, ~ glm(prior.concussion ~ gender * avp04_mean,
family = binomial,
data = .)),
avp48.model = map(train, ~ glm(prior.concussion ~ gender * avp48_mean,
family = binomial,
data = .)),
avp812.model = map(train, ~ glm(prior.concussion ~ gender * avp812_mean,
family = binomial,
data = .)),
dfa.model = map(train, ~ glm(prior.concussion ~ gender * alpha_mean,
family = binomial,
data = .)),
combo.model = map(train, ~ glm(prior.concussion ~ gender + detrended.complexity_mean +
alpha_mean + gender:detrended.complexity_mean +
gender:alpha_mean,
family = binomial,
data = .)))
dx.mean.probs <- dx.mean.models %>%
mutate(gender.pred = map2(gender.model, test, type = "response", predict),
rmse.pred = map2(rmse.model, test, type = "response", predict),
dtcomplex.pred = map2(dtcomplex.model, test, type = "response", predict),
sampen.pred = map2(sampen.model, test, type = "response", predict),
avp04.pred = map2(avp04.model, test, type = "response", predict),
avp48.pred = map2(avp48.model, test, type = "response", predict),
avp812.pred = map2(avp812.model, test, type = "response", predict),
alpha.pred = map2(dfa.model, test, type = "response", predict),
combo.pred = map2(combo.model, test, type = 'response', predict),
id = map(map(test, as.data.frame), "id", select),
actual = map(map(test, as.data.frame), "prior.concussion", select)) %>%
select(id, actual, gender.pred:combo.pred) %>%
unnest()
dx.mean.thresholds <- dx.mean.probs %>%
summarise_at(vars(ends_with("pred")),
function (x) coords(roc(dx.actual, x, direction = "<"), "best", ret = "threshold")[1])
dx.mean.predictions <- dx.mean.probs %>%
mutate(gender.pred = ifelse(gender.pred > dx.mean.thresholds$gender.pred, 1, 0),
rmse.pred = ifelse(rmse.pred > dx.mean.thresholds$rmse.pred, 1,0),
dtcomplex.pred = ifelse(dtcomplex.pred > dx.mean.thresholds$dtcomplex.pred, 1,0),
sampen.pred = ifelse(sampen.pred > dx.mean.thresholds$sampen.pred, 1,0),
avp04.pred = ifelse(avp04.pred > dx.mean.thresholds$avp04.pred, 1,0),
avp48.pred = ifelse(avp48.pred > dx.mean.thresholds$avp48.pred, 1,0),
avp812.pred = ifelse(avp812.pred > dx.mean.thresholds$avp812.pred, 1,0),
alpha.pred = ifelse(alpha.pred > dx.mean.thresholds$alpha.pred, 1,0),
combo.pred = ifelse(combo.pred > dx.mean.thresholds$combo.pred, 1, 0))
View(dx.mean.predictions)
View(average.outcomes)
dx.data <- filter(average.outcomes, dx.status != "Susp.Only")
dx.crossval <- select(dx.data, id, gender, prior.concussion, rmse.V_mean:alpha_cv) %>%
mutate(prior.concussion = ifelse(prior.concussion == "Yes", 1, 0)) %>%
crossv_kfold(10)
dx.actual <-  mutate(dx.crossval,
id = map(map(test, as.data.frame), "id", select),
actual = map(map(test, as.data.frame), "prior.concussion", select)) %>%
select(actual) %>%
unnest() %>%
collect %>% .[["actual"]]
dx.mean.models <- concussion.crossval %>%
mutate(train = map(train, as_tibble)) %>%
mutate(gender.model = map(train, ~ glm(prior.concussion ~ gender,
family = binomial,
data = .)),
rmse.model = map(train, ~ glm(prior.concussion ~ gender * rmse.V_mean,
family = binomial,
data = .)),
dtcomplex.model = map(train, ~ glm(prior.concussion ~ gender * detrended.complexity_mean,
family = binomial,
data = .)),
sampen.model = map(train, ~glm(prior.concussion ~ gender * sample.entropy_mean,
family = binomial,
data = .)),
avp04.model = map(train, ~ glm(prior.concussion ~ gender * avp04_mean,
family = binomial,
data = .)),
avp48.model = map(train, ~ glm(prior.concussion ~ gender * avp48_mean,
family = binomial,
data = .)),
avp812.model = map(train, ~ glm(prior.concussion ~ gender * avp812_mean,
family = binomial,
data = .)),
dfa.model = map(train, ~ glm(prior.concussion ~ gender * alpha_mean,
family = binomial,
data = .)),
combo.model = map(train, ~ glm(prior.concussion ~ gender + detrended.complexity_mean +
alpha_mean + gender:detrended.complexity_mean +
gender:alpha_mean,
family = binomial,
data = .)))
dx.mean.probs <- dx.mean.models %>%
mutate(gender.pred = map2(gender.model, test, type = "response", predict),
rmse.pred = map2(rmse.model, test, type = "response", predict),
dtcomplex.pred = map2(dtcomplex.model, test, type = "response", predict),
sampen.pred = map2(sampen.model, test, type = "response", predict),
avp04.pred = map2(avp04.model, test, type = "response", predict),
avp48.pred = map2(avp48.model, test, type = "response", predict),
avp812.pred = map2(avp812.model, test, type = "response", predict),
alpha.pred = map2(dfa.model, test, type = "response", predict),
combo.pred = map2(combo.model, test, type = 'response', predict),
id = map(map(test, as.data.frame), "id", select),
actual = map(map(test, as.data.frame), "prior.concussion", select)) %>%
select(id, actual, gender.pred:combo.pred) %>%
unnest()
dx.mean.thresholds <- dx.mean.probs %>%
summarise_at(vars(ends_with("pred")),
function (x) coords(roc(dx.actual, x, direction = "<"), "best", ret = "threshold")[1])
dx.actual <-  mutate(dx.crossval,
id = map(map(test, as.data.frame), "id", select),
actual = map(map(test, as.data.frame), "prior.concussion", select)) %>%
select(actual) %>%
unnest() %>%
collect %>% .[["actual"]]
dx.mean.thresholds <- dx.mean.probs %>%
summarise_at(vars(ends_with("pred")),
function (x) coords(roc(dx.actual, x, direction = "<"), "best", ret = "threshold")[1])
dx.mean.models <- dx.crossval %>%
mutate(train = map(train, as_tibble)) %>%
mutate(gender.model = map(train, ~ glm(prior.concussion ~ gender,
family = binomial,
data = .)),
rmse.model = map(train, ~ glm(prior.concussion ~ gender * rmse.V_mean,
family = binomial,
data = .)),
dtcomplex.model = map(train, ~ glm(prior.concussion ~ gender * detrended.complexity_mean,
family = binomial,
data = .)),
sampen.model = map(train, ~glm(prior.concussion ~ gender * sample.entropy_mean,
family = binomial,
data = .)),
avp04.model = map(train, ~ glm(prior.concussion ~ gender * avp04_mean,
family = binomial,
data = .)),
avp48.model = map(train, ~ glm(prior.concussion ~ gender * avp48_mean,
family = binomial,
data = .)),
avp812.model = map(train, ~ glm(prior.concussion ~ gender * avp812_mean,
family = binomial,
data = .)),
dfa.model = map(train, ~ glm(prior.concussion ~ gender * alpha_mean,
family = binomial,
data = .)),
combo.model = map(train, ~ glm(prior.concussion ~ gender + detrended.complexity_mean +
alpha_mean + gender:detrended.complexity_mean +
gender:alpha_mean,
family = binomial,
data = .)))
dx.mean.probs <- dx.mean.models %>%
mutate(gender.pred = map2(gender.model, test, type = "response", predict),
rmse.pred = map2(rmse.model, test, type = "response", predict),
dtcomplex.pred = map2(dtcomplex.model, test, type = "response", predict),
sampen.pred = map2(sampen.model, test, type = "response", predict),
avp04.pred = map2(avp04.model, test, type = "response", predict),
avp48.pred = map2(avp48.model, test, type = "response", predict),
avp812.pred = map2(avp812.model, test, type = "response", predict),
alpha.pred = map2(dfa.model, test, type = "response", predict),
combo.pred = map2(combo.model, test, type = 'response', predict),
id = map(map(test, as.data.frame), "id", select),
actual = map(map(test, as.data.frame), "prior.concussion", select)) %>%
select(id, actual, gender.pred:combo.pred) %>%
unnest()
dx.mean.thresholds <- dx.mean.probs %>%
summarise_at(vars(ends_with("pred")),
function (x) coords(roc(dx.actual, x, direction = "<"), "best", ret = "threshold")[1])
dx.mean.predictions <- dx.mean.probs %>%
mutate(gender.pred = ifelse(gender.pred > dx.mean.thresholds$gender.pred, 1, 0),
rmse.pred = ifelse(rmse.pred > dx.mean.thresholds$rmse.pred, 1,0),
dtcomplex.pred = ifelse(dtcomplex.pred > dx.mean.thresholds$dtcomplex.pred, 1,0),
sampen.pred = ifelse(sampen.pred > dx.mean.thresholds$sampen.pred, 1,0),
avp04.pred = ifelse(avp04.pred > dx.mean.thresholds$avp04.pred, 1,0),
avp48.pred = ifelse(avp48.pred > dx.mean.thresholds$avp48.pred, 1,0),
avp812.pred = ifelse(avp812.pred > dx.mean.thresholds$avp812.pred, 1,0),
alpha.pred = ifelse(alpha.pred > dx.mean.thresholds$alpha.pred, 1,0),
combo.pred = ifelse(combo.pred > dx.mean.thresholds$combo.pred, 1, 0))
View(dx.mean.predictions)
confusionMatrix(dx.mean.predictions$dtcomplex.pred, dx.mean.predictions$actual, positive = "1")
